CREATE TABLE Pago(
nroPago NUMBER(8) PRIMARY KEY,
nroFactura NUMBER(10) NOT NULL REFERENCES Factura(idF),
fechaPago DATE NOT NULL,
valor NUMBER(13) NOT NULL
);

CREATE TABLE logPagos(
ID NUMBER(10) PRIMARY KEY,
COD_OPER VARCHAR2(4),
NOMBRE_U VARCHAR2(30),
FECHA_CAMBIO DATE NOT NULL,
nroPagoP NUMBER(8) NOT NULL,
nroFacturaP NUMBER(10) NOT NULL,
fechaPagoP DATE NOT NULL,
valorP NUMBER(13) NOT NULL
);

/* 1. */
CREATE OR REPLACE PROCEDURE puntoUno(FECHAIN DATE)
AS
IDFACTURA NUMBER;
FECHAFACTURA DATE;
VALOR_ENVIOFACTURA NUMBER;
METODO_PAGOFACTURA VARCHAR2(10);
CLIENTEFACTURA NUMBER;
NRO_TRAJETAFACTURA NUMBER;
VALORFACTURA NUMBER;
VALORP NUMBER;

BEGIN
	SELECT IDF, FECHA, VALOR_ENVIO, METODO_PAGO, CLIENTE, NRO_TARJETA, VALOR, VALORPAGADO INTO IDFACTURA, FECHAFACTURA, VALOR_ENVIOFACTURA, METODO_PAGOFACTURA, CLIENTEFACTURA, NRO_TRAJETAFACTURA, VALORFACTURA, VALORP
	FROM PAGO INNER JOIN FACTURA ON(IDF = NROFACTURA)
	WHERE VALORPAGADO != VALOR AND FECHAPAGO <= FECHAIN AND ROWNUM <= 1;

	DBMS_OUTPUT.PUT_LINE('IDF' || ' ' || 'FECHA' || ' ' || 'VALOR_ENVIO' || ' ' || 'METODO_PAGO' || ' ' || 'CLIENTE' || ' ' || 'NRO_TARJETA' || ' ' || 'VALOR FACTURA' || ' ' || 'VALOR_PAGADO');


	FOR I IN (SELECT IDF, FECHA, VALOR_ENVIO, METODO_PAGO, CLIENTE, NRO_TARJETA, VALOR, VALORPAGADO FROM PAGO INNER JOIN FACTURA ON(IDF = NROFACTURA) WHERE VALORPAGADO != VALOR AND FECHAPAGO <= FECHAIN)
	LOOP
		IDFACTURA := I.IDF;
		FECHAFACTURA := I.FECHA;
		VALOR_ENVIOFACTURA := I.VALOR_ENVIO;
		METODO_PAGOFACTURA := I.METODO_PAGO;
		CLIENTEFACTURA := I.CLIENTE;
		NRO_TRAJETAFACTURA := I.NRO_TARJETA;
		VALORFACTURA := I.VALOR;
		VALORP := I.VALORPAGADO;

   		DBMS_OUTPUT.PUT_LINE(IDFACTURA || ' ' || FECHAFACTURA || ' ' || VALOR_ENVIOFACTURA || ' ' || METODO_PAGOFACTURA || ' ' ||CLIENTEFACTURA || ' ' || NRO_TRAJETAFACTURA || ' ' || VALORFACTURA || ' ' || VALORP );
	END LOOP;

EXCEPTION
WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('ERROR: NO SE HAN ENCONTRADO FACTURAS PARA LA FECHA SELECCIONADA');
END;
/

/*
Prueba: exec puntoUno('25/05/20');
*/

/* 2. */
CREATE OR REPLACE PROCEDURE PUNTODOS(MES NUMBER, ANIO NUMBER) AS
CODIGO_TMP NUMBER;
NOMBRE_TMP VARCHAR2(20);
PRECIO_TMP NUMBER;
RANK_TMP NUMBER;
BEGIN
    SELECT CODIGO, NOMBRE, PRECIO, RANK() OVER (ORDER BY SUM(CANNTIDAD) DESC ) RANKING  INTO CODIGO_TMP,NOMBRE_TMP, PRECIO_TMP,RANK_TMP
    FROM FACTURA INNER JOIN COMPRA ON(IDF = NRO_FACTURA) INNER JOIN PRODUCTO ON (COMPRA.PRODUCTO = PRODUCTO.CODIGO)
    WHERE EXTRACT(MONTH FROM FECHA) = MES AND EXTRACT(YEAR FROM FECHA) = ANIO AND ROWNUM <=1
    GROUP BY CODIGO,NOMBRE, PRECIO;
    DBMS_OUTPUT.PUT_LINE('MAS VENDIDOS');
    DBMS_OUTPUT.PUT_LINE('------------');
    FOR I IN(
    SELECT CODIGO, NOMBRE, PRECIO, RANK() OVER (ORDER BY SUM(CANNTIDAD) DESC ) RANKING
    FROM FACTURA INNER JOIN COMPRA ON(IDF = NRO_FACTURA) INNER JOIN PRODUCTO ON (COMPRA.PRODUCTO = PRODUCTO.CODIGO)
    WHERE EXTRACT(MONTH FROM FECHA) = MES AND EXTRACT(YEAR FROM FECHA) = ANIO  AND ROWNUM<=3
    GROUP BY CODIGO,NOMBRE, PRECIO)
    LOOP
        NOMBRE_TMP := I.NOMBRE;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_TMP);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('MENOS VENDIDOS');
    DBMS_OUTPUT.PUT_LINE('------------');
    FOR I IN(
    SELECT CODIGO, NOMBRE, PRECIO, RANK() OVER (ORDER BY SUM(CANNTIDAD)) RANKING
    FROM FACTURA INNER JOIN COMPRA ON(IDF = NRO_FACTURA) INNER JOIN PRODUCTO ON (COMPRA.PRODUCTO =    PRODUCTO.CODIGO) WHERE EXTRACT(MONTH FROM FECHA) = MES AND EXTRACT(YEAR FROM FECHA) = ANIO  AND ROWNUM <=3 GROUP BY CODIGO,NOMBRE, PRECIO)
    LOOP
        NOMBRE_TMP := I.NOMBRE;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_TMP);
    END LOOP;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: NO SE ENCONTRARON DATOS PARA ESTA FECHA');
END;
/
/*
Prueba:
Fallo: exec puntoDos(01,2018);
Correcto: exec puntoDos(01,2019);
*/

/* 3. */
CREATE OR REPLACE TRIGGER PUNTO3A
AFTER INSERT ON PAGO FOR EACH ROW
DECLARE
ID_NEW NUMBER;
FECHA DATE;
BEGIN
  FECHA := SYSDATE;
  SELECT COUNT(ID) into ID_NEW FROM LOGPAGOS;
  INSERT INTO LOGPAGOS VALUES(ID_NEW+1,'INS', 'Manuel',fecha,:NEW.NROPAGO,:NEW.NROFACTURA,FECHA,:NEW.VALORPAGADO);
END;
/
/*Prueba trigger 3a: insert into pago values(6,4,'11/03/20',5000);*/

CREATE OR REPLACE TRIGGER PUNTO3B
AFTER UPDATE ON PAGO FOR EACH ROW
DECLARE
ID_NEW NUMBER;
TODAY DATE := SYSDATE;
BEGIN
SELECT COUNT(ID) INTO ID_NEW FROM LOGPAGOS;
    INSERT INTO LOGPAGOS VALUES(ID_NEW+1,'UP-B', 'Manuel',TODAY,:OLD.NROPAGO,:OLD.NROFACTURA,:OLD.FECHAPAGO,:OLD.VALORPAGADO);
    INSERT INTO LOGPAGOS VALUES(ID_NEW+2,'UP-A', 'Manuel',TODAY,:NEW.NROPAGO,:NEW.NROFACTURA,:NEW.FECHAPAGO,:NEW.VALORPAGADO);
END;
/

/*Prueba trigger 3b UPDATE PAGO SET VALORPAGADO = 12666 WHERE NROPAGO = 5;*/

CREATE OR REPLACE TRIGGER PUNTO3C
AFTER DELETE ON PAGO FOR EACH ROW
DECLARE
  ID_NEW NUMBER;
BEGIN
  SELECT COUNT(ID) INTO ID_NEW FROM LOGPAGOS;
  INSERT INTO LOGPAGOS VALUES(ID_NEW+1, 'DEL', 'Laura', SYSDATE, :OLD.NROPAGO,:OLD.NROFACTURA, :OLD.FECHAPAGO,:OLD.VALORPAGADO);
END;
/
/*Prueba Trigger 3c: DELETE FROM PAGO WHERE NROPAGO = 5;*/

/* 4. */
CREATE OR REPLACE TRIGGER TRFACT
BEFORE INSERT ON COMPRA FOR EACH ROW
DECLARE
PR NUMBER;
DIFERENTE EXCEPTION;
BEGIN
    SELECT PRECIO INTO PR FROM PRODUCTO WHERE CODIGO = :NEW.PRODUCTO;
    IF PR != (:NEW.VALOR/:NEW.CANNTIDAD) THEN
        RAISE DIFERENTE;
    END IF;
EXCEPTION
    WHEN ZERO_DIVIDE THEN
        RAISE_APPLICATION_ERROR(-20002, 'LA CANTIDAD NO PUEDE SER CERO');
    WHEN DIFERENTE THEN
        RAISE_APPLICATION_ERROR(-20001,'EL PRECIO ES DISTINTO AL DEL CATALOGO');
END;

CREATE OR REPLACE PROCEDURE INSCOMP(IDCOMPRA NUMBER, NFACTURA NUMBER, CP NUMBER,QN NUMBER, V NUMBER) AS
BEGIN
    SAVEPOINT ANTES;
    INSERT INTO COMPRA VALUES (IDCOMPRA, NFACTURA, CP, QN, V);
    COMMIT;
    EXCEPTION
    WHEN ZERO_DIVIDE THEN
        ROLLBACK TO ANTES;
    WHEN OTHERS THEN
        ROLLBACK TO ANTES;
END;
/

/*
Prueba:
EXEC inscomp(8,6,1,0,15000);
EXEC inscomp(8,6,1,1,15000);
*/

/* 5. */
CREATE OR REPLACE TRIGGER trDevol
BEFORE INSERT ON DEVOLUCIONES FOR EACH ROW
DECLARE
FECHA DATE;
TODAY DATE := SYSDATE;
BEGIN
  SELECT VIGENCIA INTO FECHA FROM PRODUCTO WHERE PRODUCTO.CODIGO = :NEW.COD_PRODUCTO;
  IF TODAY > FECHA THEN
      RAISE_APPLICATION_ERROR(-20000,'GARANTIA VENCIDA');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20500,'No existe el producto');
END;

/*
Prueba:
INSERT INTO devoluciones VALUES (7,7,7,1107532048); prueba para producto inexistente
INSERT INTO devoluciones VALUES (1,5,5,8888814145); prueba para garantÃ­a vencida
*/

/* 6. */
CREATE OR REPLACE TRIGGER ActInventarioP
AFTER INSERT ON PROVEER FOR EACH ROW
DECLARE
	X NUMBER(10);
BEGIN
	SELECT CANTIDAD INTO X FROM PRODUCTO WHERE CODIGO = :NEW.IDPD;
	UPDATE PRODUCTO SET CANTIDAD = X + :NEW.QUANTITY WHERE PRODUCTO.CODIGO = :NEW.IDPD;
END;
/

CREATE OR REPLACE TRIGGER ActInventarioC
BEFORE INSERT ON COMPRA FOR EACH ROW
DECLARE
	Y NUMBER(10);
	INSUF_INVENT EXCEPTION;
	PRAGMA EXCEPTION_INIT (INSUF_INVENT, -1438);
BEGIN
	SELECT CANTIDAD INTO Y FROM PRODUCTO WHERE CODIGO = :NEW.PRODUCTO;
	IF Y - :NEW.CANNTIDAD >= 0 THEN
		UPDATE PRODUCTO SET CANTIDAD = Y - :NEW.CANNTIDAD WHERE PRODUCTO.CODIGO = :NEW.PRODUCTO;
	ELSE
		RAISE INSUF_INVENT;
	END IF;

EXCEPTION
WHEN INSUF_INVENT THEN
	dbms_output.put_line('Error: No hay productos suficientes en el inventario');
	raise_application_error(-1438,'No hay productos suficientes');
END;
/

CREATE OR REPLACE PROCEDURE AUX (V1 NUMBER, V2 NUMBER, V3 NUMBER, V4 NUMBER, V5 NUMBER) AS
BEGIN
    SAVEPOINT FLAG;
    INSERT INTO COMPRA VALUES(V1, V2, V3, V4,V5);
    COMMIT;

EXCEPTION
WHEN OTHERS THEN
    ROLLBACK TO FLAG;
END;
/

/*
Prueba:
INSERT INTO proveer VALUES(7,1,'23/05/20',1, 9000, 1 ); prueba para actualizar inventario despues de pedir al proveedor
EXEC AUX(9, 1, 1, 10, 100000); prueba para actualizar invenario despues de hacer una compra
*/

/* 7. */
CREATE GLOBAL TEMPORARY TABLE tempProd(CODIGO_PRODUCTO NUMBER(8), NOMBRE_PRODUCTO VARCHAR2(25), ID_PROVEEDOR NUMBER(9), NOMBRE_PROVEEDOR VARCHAR2(30), DIRECCION_PROVEEDOR VARCHAR2(20), CORREO_PROVEEDOR VARCHAR2(20));
CREATE OR REPLACE PROCEDURE neceProd
AS
NOMBRE_PRODUCTO VARCHAR2(25);
ID_PROVEEDOR NUMBER;
NOMBRE_PROVEEDOR VARCHAR2(30);
DIRECCION_PROVEEDOR VARCHAR2(30);
CORREO_PROVEEDOR VARCHAR2(30);
C NUMBER;
BEGIN
	FOR I IN (SELECT PRODUCTO AS P, AVG(CANNTIDAD) AS PROMEDIO FROM PRODUCTO INNER JOIN COMPRA ON(CODIGO=PRODUCTO) INNER JOIN FACTURA ON(NRO_FACTURA = IDF) WHERE EXTRACT(YEAR FROM FACTURA.FECHA) = EXTRACT(YEAR FROM SYSDATE) GROUP BY PRODUCTO)
	LOOP
		SELECT CANTIDAD, NOMBRE INTO C, NOMBRE_PRODUCTO FROM PRODUCTO WHERE CODIGO=I.P AND ROWNUM <= 1;
		SELECT IDPRO INTO ID_PROVEEDOR FROM PROVEER INNER JOIN PRODUCTO ON(IDPD = CODIGO) WHERE ROWNUM <= 1 GROUP BY IDPRO;
		SELECT NOMBRE, DIRECCION, CORREO INTO NOMBRE_PROVEEDOR, DIRECCION_PROVEEDOR, CORREO_PROVEEDOR FROM PROVEEDOR INNER JOIN PROVEER ON(ID=IDPRO) WHERE ID=ID_PROVEEDOR AND ROWNUM <= 1;
		IF I.PROMEDIO > C THEN
			INSERT INTO tempProd VALUES(I.P, NOMBRE_PRODUCTO, ID_PROVEEDOR, NOMBRE_PROVEEDOR, DIRECCION_PROVEEDOR, CORREO_PROVEEDOR);
		END IF;
	END LOOP;
END;
/

/*Prueba: exec neceProd;*/
